import cv2, Queue, threading, time

# bufferless VideoCapture
class VideoCapture:

  def __init__(self, name):
    self.cap = cv2.VideoCapture(name)
    self.q = Queue.Queue()
    t = threading.Thread(target=self._reader)
    t.daemon = True
    t.start()

  # read frames as soon as they are available, keeping only most recent one
  def _reader(self):
    while True:
      ret, frame = self.cap.read()
      if not ret:
        break
      if not self.q.empty():
        try:
          self.q.get_nowait()   # discard previous (unprocessed) frame
        except Queue.Empty:
          pass
      self.q.put(frame)

  def read(self):
    return self.q.get()

cap = VideoCapture(0)
while True:
  frame = cap.read()
  time.sleep(.5)   # simulate long processing
  cv2.imshow("frame", frame)
  if chr(cv2.waitKey(1)&255) == 'q':
    break



# Importing Libraries
#import serial
import time
import cv2

from pynput import keyboard
print(1)
'''
cam1 = cv2.VideoCapture(1)
cam2 = cv2.VideoCapture(2)
cam3 = cv2.VideoCapture(3)
'''
cam1 = cv2.VideoCapture(1, cv2.CAP_DSHOW)
cam2 = cv2.VideoCapture(2, cv2.CAP_DSHOW)
cam3 = cv2.VideoCapture(3, cv2.CAP_DSHOW)
time.sleep(0.001)

print(2)
cam1.set(cv2.CAP_PROP_FRAME_WIDTH,640)
cam1.set(cv2.CAP_PROP_FRAME_HEIGHT,480)
cam1.set(cv2.CAP_PROP_AUTOFOCUS,-1.0)
cam1.set(cv2.CAP_PROP_FOCUS, 400.0)

cam1.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # set buffer size

print(3)
cam2.set(cv2.CAP_PROP_FRAME_WIDTH,640)
cam2.set(cv2.CAP_PROP_FRAME_HEIGHT,480)
cam2.set(cv2.CAP_PROP_AUTOFOCUS,-1.0)
cam2.set(cv2.CAP_PROP_FOCUS, 400.0)

cam2.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # set buffer size

print(4)
cam3.set(cv2.CAP_PROP_FRAME_WIDTH,640)
cam3.set(cv2.CAP_PROP_FRAME_HEIGHT,480)
cam3.set(cv2.CAP_PROP_AUTOFOCUS,-1.0)
cam3.set(cv2.CAP_PROP_FOCUS,400.0)

cam3.set(cv2.CAP_PROP_BUFFERSIZE, 1)  # set buffer size

print(5)
#arduino = serial.Serial(port='COM4', baudrate=115200, timeout=.1)
counter = 1000

while True:
    time.sleep(0.04)
    # data = arduino.readline()
    # data = int.from_bytes(data,"big")#.decode('ascii')

    #if (data == 49):   
    print(6)
    import keyboard #pip3 install keyboard

    while True:

        if keyboard.read_key() == "p":
            time.sleep(1)       
    
        #k = cv2.waitKey(1)

        # time.sleep(3)
            print("Take photo")
            ret1, frame1 = cam1.read()
            ret2, frame2 = cam2.read()
            ret3, frame3 = cam3.read()
            if not (ret1 or ret2 or ret3):
                print("failed to grab frame")
                break
            # cv2.imshow("t", frame1)
            # cv2.imshow("d", frame2)
            # cv2.imshow("s", frame3)
            number1 = counter 
            number2 = (counter + 1)
            number3 = (counter + 2)
            #cv2.imwrite("Brick%d.jpg" % number1, frame1)
            #block = "C:\Users\Wendy Exterkate\OneDrive\Documenten\TW\jaar4\minor\BSL Bricks\training data\Blocks"
            #brick = ""
            #plate = ""
            #sheet = ""
            #tile = ""
            cv2.imwrite(r"C:\Users\Wendy Exterkate\OneDrive\Documenten\TW\jaar4\minor\BSL Bricks\test\LEGO_%d.png" % number1, frame1)
            cv2.imwrite(r"C:\Users\Wendy Exterkate\OneDrive\Documenten\TW\jaar4\minor\BSL Bricks\test\LEGO_%d.png" % number2, frame2)
            cv2.imwrite(r"C:\Users\Wendy Exterkate\OneDrive\Documenten\TW\jaar4\minor\BSL Bricks\test\LEGO_%d.png" % number3, frame3)
            #cv2.imwrite(r"C:\Users\jipra\Documents\Training_data\Brick%d.png" % number1, frame1)
            #cv2.imwrite(r"C:\Users\jipra\Documents\Training_data\Brick%d.png" % number2, frame2)
            #cv2.imwrite(r"C:\Users\jipra\Documents\Training_data\Brick%d.png" % number3, frame3)
            del frame1
            del frame2 
            del frame3 

            counter += 3
            # cv2.waitKey(0)
            # cv2.destroyAllWindows() 

        if keyboard.read_key() == "q":
            print("stopping")
            break
    break
    

cam1.release()
cam2.release()
cam3.release()

cv2.destroyAllWindows()
